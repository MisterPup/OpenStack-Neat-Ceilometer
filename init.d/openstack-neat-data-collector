#!/bin/sh
#
# openstack-neat-data-collector  OpenStack Neat Data Collector
#
# chkconfig:   - 99 01
# description: The data collector monitors the virtual machines \
#              running on the host and collects the data on the \
#              CPU utilization. The collected data are stored   \
#              locally in files and in the central database to  \
#              be used by the local and global managers.        

### BEGIN INIT INFO
# Provides: openstack_neat_data_collector
# Required-Start: $remote_fs $network $syslog
# Required-Stop: $remote_fs $network $syslog
# Short-Description: OpenStack Neat Data Collector
# Description: The data collector monitors the virtual machines 
#              running on the host and collects the data on the 
#              CPU utilization. The collected data are stored   
#              locally in files and in the central database to  
#              be used by the local and global managers.        
### END INIT INFO

. /lib/lsb/init-functions

PYTHONPATH=/usr/lib/python2.7/site-packages
export PYTHONPATH

suffix=data-collector
prog=openstack-neat-$suffix
exec="/usr/bin/neat-$suffix"
piddir="/var/run/neat"
pidfile="$piddir/neat-$suffix.pid"
logdir="/var/log/neat"
logfile="$logdir/data-collector-service.log"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockdir="/var/lock/subsys"
lockfile="$lockdir/$prog"

[ -x $DAEMON ] || exit 0

for i in ${lockdir} ${piddir} ; do
        [ ! -d ${i} ] && mkdir -p ${i}
done

do_start() {
        start-stop-daemon --start \
                        --background --quiet \
                        --chuid root \
                        --make-pidfile --pidfile $pidfile \
                        --startas $exec \
                        --test > /dev/null \
                        || return 1
        start-stop-daemon --start \
                        --background --quiet \
                        --chuid root \
                        --make-pidfile --pidfile $pidfile \
                        --startas /bin/bash \
                        -- -c "exec $exec > $logfile 2>&1" \
                        || return 2
}

do_stop() {
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $pidfile
        RETVAL=$?
        rm -f $pidfile
        return "$RETVAL"
}

case "$1" in
start)
        log_daemon_msg "Starting $desc" "$prog"
        do_start
        case $? in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
;;
stop)
        log_daemon_msg "Stopping $desc" "$prog"
        do_stop
        case $? in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
;;
status)
        status_of_proc "$exec" "$prog" && exit 0 || exit $?
;;
restart|force-reload)
        log_daemon_msg "Restarting $desc" "$prog"
        do_stop
        case $? in
        0|1)
                do_start
                case $? in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
        ;;
        *) log_end_msg 1 ;; # Failed to stop
        esac
;;
*)
        echo "Usage: $0 {start|stop|status|restart|force-reload}" >&2
        exit 3
;;
esac

exit 0
